{"version":3,"sources":["controllers/geoAPIController-src.js"],"names":["define","sampleApp","register","controller","$rootScope","$scope","geolocateSvc","exSrcConSrv","arryObjSrv","gl","this","$on","tracker","mapUrl","getCurrentGPS","then","setCoords","onerror","exSrcObj","exsrccon","html","label","src","icon","css","psrc","exSrcLinkArray","parseObj","mapsData","mapsdata","obj","uri","center","heading","markers","zoom","size","mapType","streetLocation","visible","setPositionData","pos","callback","gpsLocationData","lat","coords","latitude","long","longitude","latlon","accuracy","altitude","speed","populateObjects","roadMap","color","position","me","streetView","satelliteMap","defaultMap","generateMap","constructMapUrl","arg","isNaN","mapUri","maptype","mapLocation","mapCenter","mapHeading","mapZoom","mapSize","mapMarkers","mapVisible","i","length","markerCoords","watchMap","watchID","navigator","geolocation","watchPosition","$apply","cords","altitudeAccuracy","geoOption","clearWatch","changeMap","enableHighAccuracy","err","errorMessage","message","console","log"],"mappings":"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","file":"controllers/geoAPIController.js","sourcesContent":["//Geolocate API Controller\n\ndefine(['app'], function(sampleApp){\n\nsampleApp.register.controller('geoAPI', function($rootScope, $scope, geolocateSvc, exSrcConSrv, arryObjSrv)\t{\n\tvar gl = this;\n\n    $scope.$on('$viewContentLoaded', function() {\n        gl.tracker = true;\n        gl.mapUrl = \"/images/loading1.gif\";\n        geolocateSvc.getCurrentGPS().then(gl.setCoords,gl.onerror);\n    });\n    \n    $rootScope.exSrcObj = exSrcConSrv;\n\t\n\t$rootScope.exSrcObj.exsrccon(\n\t{\n        \"html\" : {\t\n        \"label\":\"HTML\", \n        \"src\":\"pages/htmlapi/geolocate.html\",   \n        \"icon\":\"fa fa-html5\"\n        },\n        \"controller\" : {\n        \"label\":\"geoAPICtrlr\", \n        \"src\":\"srcjs/app/controllers/geoAPIController-src.js\", \n        \"icon\":\"fa fa-dot-circle-o\"\n        },\n        \"css\" : {\n        \"label\":\"SCSS\", \n        \"src\":\"scss/app/geolocate.scss\", \n        \"psrc\":\"css/app/geolocate.css\",\n        \"icon\":\"fa fa-css3\"\n        }\n\t});\n\t\n    $rootScope.exSrcLinkArray = arryObjSrv.parseObj($rootScope.exSrcObj); \n\n    // Map Object Class \n    // Using IIFE to create function constructor via a function expression\n    gl.mapsData = (function()   {\n        function mapsdata(obj){\n            this.uri = obj.uri;\n            this.center = obj.center;\n            this.heading = obj.heading;\n            this.markers = obj.markers;\n            this.zoom = obj.zoom;\n            this.size = obj.size;\n            this.mapType = obj.mapType;\n            this.streetLocation = obj.streetLocation;\n            this.visible = obj.visible;\n        }\n    \treturn mapsdata;\n    })();\n\n    // Populate GPS Data Object\n    gl.setPositionData = function(pos, callback) {\n        gl.gpsLocationData = {\n            'lat' : pos.coords.latitude,\n            'long' : pos.coords.longitude,\n            'latlon' : pos.coords.latitude + \",\" + pos.coords.longitude,\n            'accuracy' : pos.coords.accuracy,\n            'altitude' : pos.coords.altitude,\n            'heading' : pos.coords.heading,\n            'speed' : pos.coords.speed\n        };\n        callback();\n    };\n\n    //Map Object Constructors\n    //For example purposes data written out below could come from DB or JSON\n    gl.populateObjects = function(callback){\n         gl.roadMap = new gl.mapsData({\n            'uri' : 'https://maps.googleapis.com/maps/api/staticmap',\n            'center' : 'gps',\n            'heading' : '',\n            'markers' : [\n                {'color' : 'blue','label' : 'U','position' : 'gps'}\n            ],\n            'zoom' : '17',\n            'size' :'400x300',\n            'mapType' : '',\n            'streetLocation' : '',\n            'visible' : ''\n        });\n        \n        gl.me = new gl.mapsData({\n            'uri' : 'https://maps.googleapis.com/maps/api/staticmap',\n            'center' : '',\n            'heading' : '',\n            'markers' : [\n                {'color' : 'blue','label' : 'U','position' : 'gps'},\n                {'color' : 'red','label' : 'M','position' : 'stony+point,NY'}\n            ],\n            'zoom' : '',\n            'size' :'400x300',\n            'mapType' : '',\n            'streetLocation' : '',\n            'visible' : 'stony+point,NY'\n        });\n        \n        gl.streetView = new gl.mapsData({\n            'uri' : 'https://maps.googleapis.com/maps/api/streetview',\n            'center' : '',\n            'heading' : 'gps',\n            'markers' : [],\n            'zoom' : '',\n            'size' :'400x300',\n            'mapType' : '',\n            'streetLocation' : 'gps',\n            'visible' : ''\n        });\n        \n        gl.satelliteMap = new gl.mapsData({\n            'uri' : 'https://maps.googleapis.com/maps/api/staticmap',\n            'center' : 'gps',\n            'heading' : '',\n            'markers' : [\n                {'color' : 'blue','label' : 'U','position' : 'gps'}\n            ],\n            'zoom' : '17',\n            'size' :'400x300',\n            'mapType' : 'satellite',\n            'streetLocation' : '',\n            'visible' : ''\n        });\n        \n        gl.defaultMap = gl.roadMap;\n        callback();\n    };\n    \n    gl.generateMap = function()  {\n        gl.mapsData = gl.defaultMap;\n        gl.constructMapUrl();\n    };\n    \n    gl.constructMapUrl = function(arg) { \n        \n    if(isNaN(gl.gpsLocationData.heading) || gl.gpsLocationData.heading == null) {\n        gl.gpsLocationData.heading = '';    \n    }   \n        \n    var mapUri =        gl.mapsData.uri + \"?\";\n    var maptype =       \"maptype=\"+gl.mapsData.mapType+\"&\";\n    var mapLocation =   gl.mapsData.streetLocation == 'gps' \n                        ? \"location=\"+gl.gpsLocationData.latlon+\"&\"\n                        : \"location=\"+gl.mapsData.streetLocation+\"&\";\n    var mapCenter =     gl.mapsData.center == 'gps' \n                        ? \"center=\"+gl.gpsLocationData.latlon+\"&\"\n                        : \"center=\"+gl.mapsData.center+\"&\";\n    var mapHeading =    gl.mapsData.heading == 'gps' \n                        ? \"heading=\"+gl.gpsLocationData.heading+\"&\"\n                        : \"heading=\"+gl.mapsData.heading+\"&\";\n    var mapZoom =       \"zoom=\"+gl.mapsData.zoom+\"&\";\n    var mapSize =       \"size=\"+gl.mapsData.size+\"&\";\n    var mapMarkers =    \"\";\n    var mapKey =        \"key=AIzaSyDSGrQ3gITM0kVcWYeec2eD3Ph0-C2seWo&\";\n    var mapVisible =    \"visible=\"+gl.mapsData.visible;\n\n    for (var i=0;i<gl.mapsData.markers.length; i++)  {\n    var markerCoords =  gl.mapsData.markers[i].position == 'gps' \n                        ? gl.gpsLocationData.latlon \n                        : gl.mapsData.markers[i].position;\n    mapMarkers +=   \"markers=color:\"+gl.mapsData.markers[i].color+\n                    \"|label:\"+gl.mapsData.markers[i].label+\"|\"+markerCoords+\"&\";\n    }\n    \n    gl.mapUrl = mapUri+\n                maptype+\n                mapLocation+\n                mapCenter+\n                mapHeading+\n                mapMarkers+\n                mapSize+\n                mapZoom+\n                //mapKey;\n                mapVisible;\n    };\n    \n    gl.watchMap = function(arg)    {\n    if (arg == 'start') {\n    gl.watchID = navigator.geolocation.watchPosition(function(position) {\n        $scope.$apply(function(){\n        $scope.position = position;\n        var cords = $scope.position.coords;\n        gl.gpsLocationData.lat = cords.latitude;\n        gl.gpsLocationData.long = cords.longitude;\n        gl.gpsLocationData.latlon = gl.gpsLocationData.lat + \",\" + gl.gpsLocationData.long;\n        gl.gpsLocationData.accuracy = cords.accuracy;\n        gl.gpsLocationData.altitude = cords.altitude;\n        gl.gpsLocationData.altitudeAccuracy = cords.altitudeAccuracy;\n        gl.gpsLocationData.heading = cords.heading;\n        gl.gpsLocationData.speed = cords.speed;\n        gl.constructMapUrl();\n        });\n    }, gl.onerror, gl.geoOption);\n    } else if (arg == 'stop')    {\n    navigator.geolocation.clearWatch(gl.watchID);\n    }\n    };\n\n    gl.setCoords = function (pos)   {\n        gl.setPositionData(pos, function()  {\n            gl.populateObjects(function()   {\n                gl.generateMap();   \n            });    \n        });\n    };\n    \n    gl.changeMap = function(obj)   {\n        gl.mapsData = obj;\n        gl.constructMapUrl();\n    };\n    \n    gl.geoOption = {\n        enableHighAccuracy: true\n    };\n    \n    gl.onerror = function(err)  {\n        gl.errorMessage = err.message;\n    };\n    \n    console.log(\"-----Controller Scope-----\");\n\tconsole.log($scope);\n    \n    console.log(\"-----gl Controller Scope-----\");\n\tconsole.log(gl);\n\n});\n});"],"sourceRoot":"/source/"}