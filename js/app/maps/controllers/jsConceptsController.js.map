{"version":3,"sources":["controllers/jsConceptsController-src.js"],"names":["define","sampleApp","register","controller","$sce","$scope","$rootScope","exSrcConSrv","arryObjSrv","funcState","invoType","this","name","thisResult","PersonObjConstr","firstname","lastname","greetFullName","jc","exSrcObj","exSrcCon","html","label","src","icon","css","psrc","exSrcLinkArray","parseObj","trust","trustAsHtml","localGlobal","globalVariable","myIIFE","localWindow","setTimeout","angular","element","window","iifeResult","newSpace","o","prop1","func1","namespaceResult","arithmetic","counter","add","toString","subtract","funcExp","obj","method1","invoExpAsConst","invoStaAsConst","objAsConst","call","personObjLit","james","prototype","formalGreet","valerie","Object","create","protoResult","concept","def","cite","defDesc","code","resultsLabel","controls","objPrpName","type","templateHead","result","xboxDesc","buttonProps","b1text","b1Func","b2text","b2Func","action","operation","console","log"],"mappings":"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","file":"controllers/jsConceptsController.js","sourcesContent":["// JSConcepts Controller\n\ndefine([\"app\"], function(sampleApp)    {\n    \nsampleApp.register.controller('jsconcepts', function($sce, $scope, $rootScope, exSrcConSrv, arryObjSrv)  {\n    var jc = this;\n        \n    $rootScope.exSrcObj = new exSrcConSrv.exSrcCon(\n\t{\n\t\t\"html\" : {\t\n\t\t\"label\":\"HTML\", \n\t\t\"src\":\"pages/jsconcepts.html\", \n\t\t\"icon\":\"fa fa-html5\"\n\t\t},\n\t\t\"controller\" : {\t\n\t\t\"label\":\"jsConceptsCtrlr\", \n\t\t\"src\":\"srcjs/app/controllers/jsConceptsController-src.js\", \n\t\t\"icon\":\"fa fa-dot-circle-o\"\n\t\t},\n\t\t\"css\" : {\n\t\t\"label\":\"SCSS\", \n\t\t\"src\":\"scss/app/js-concepts.scss\", \n\t\t\"psrc\":\"css/app/js-concepts.css\",\n\t\t\"icon\":\"fa fa-css3\" \n\t\t}\n\t}); \n        \n    $rootScope.exSrcLinkArray = arryObjSrv.parseObj($rootScope.exSrcObj);  \n    \n    \n    \n    $scope.trust = $sce.trustAsHtml;\n    \n    \n    //IIFE Example\n    var localGlobal = 0;\n    var globalVariable = 5;\n\tvar myIIFE = (function(localGlobal, localWindow)\t{\n \t\tlocalGlobal = 100;\n \t\tsetTimeout(function(){\n \t\t\tangular.element(\"#iife\").html(\"YES\");\n \t\t\t\n \t\t},500);\n \t\treturn localGlobal;\n \t})(globalVariable, window);\n\n\tvar iifeResult =\"globalVariable = \" + globalVariable + \"<br>\" +\n\t\t\t\t\t\"localGlobal = \" + localGlobal + \"<br>\"+\n\t\t\t\t\t\"myIIFE = \" + myIIFE + \"<br>\"; \n\t\t\n\t\t\t\t\t\t\n\t// Namespacing\n\tvar newSpace = newSpace || {};\n\t(function(o)\t{\n\t\t//console.log(o);\n\t\to.prop1 = \"NewSpace Value\";\n\t\to.func1 = function()\t{\n\t\t}\n\t})(newSpace)\n\t\t\t\t\t\t\n\tvar prop1 = \"Global Value\";\n\tvar func1 = function()\t{\n\t}()\t\t\t\n\tnewSpace.func1();\n\t\n\tvar namespaceResult =\t\"----------------------\" + \"<br>\"+\n\t\t\t\t\"| This is Global func1\" + \"<br>\"+\n\t\t\t\t\"| Global prop1: \"+prop1 + \"<br>\"+\n\t\t\t\t\"| NewSpace prop1: \"+newSpace.prop1 + \"<br>\"+\n\t\t\t\t\"----------------------\" + \"<br>\"+\n\t\t\t\t\"----------------------\" + \"<br>\" +\n\t\t\t\t\"| This is NewSpace func1\" + \"<br>\" +\n\t\t\t\t\"| NewSpace prop1: \"+newSpace.prop1 + \"<br>\" +\n\t\t\t\t\"| Global prop1: \"+prop1 + \"<br>\" +\n\t\t\t\t\"----------------------\" + \"<br>\";\n\n\n    // Closure Example\n\tvar arithmetic = (function () {\n\t\tvar counter = 0;\n\t\t\treturn {\n\t\t\t\tadd: function(){\n\t\t\t\t\tcounter += 1; \n\t\t\t\t\treturn  counter.toString();\n\t\t\t\t},\n\t\t\t\tsubtract: function(){\n\t\t\t\t\tcounter -= 1; \n\t\t\t\t\treturn counter.toString()\n\t\t\t\t}\n\t\t\t};\n\t})();\n\t\n\t\n\t\n\t// This Example\n\tvar funcExp = function(invoType)\t{\n\t\tthis.name = \"funcExp\";\n\t\tthisResult += \"| \" + this.name + \" \" + invoType + \"<br>\";\n\t\tthisResult += \"| this = \" + this + \"<br>\";\n\t}\n\t\n\tfunction funcState(invoType)\t{\n\t\tthis.name = \"funcState\";\n\t\tthisResult += \"| \" + this.name + \" \" + invoType + \"<br>\";\n\t\tthisResult += \"| this = \" + this + \"<br>\";\n\t}\n\t\n\tvar obj = {\n\t\tname : \"obj\",\n\t\tmethod1 : function(invoType)\t{\n\t\t\tthisResult += \"| \" + this.name + \" \" + invoType + \"<br>\";\n\t\t\tthisResult += \"| this = \" + this + \"<br>\";\n\t\t}\n\t}\n\t\n\tvar thisResult = \"---------------------------\" + \"<br>\";\n\tfuncExp(\"Invoke As Function\");\n\tthisResult += \"| window.name: \" + window.name + \"<br>\";\n\tvar invoExpAsConst = new funcExp(\"Invoke with Constructor\");\n\tthisResult += \"| invoExpAsConst.name: \" + invoExpAsConst.name + \"<br>\";\n\tthisResult += \"---------------------------\" + \"<br>\";\n\t\n\tthisResult += \"---------------------------\" + \"<br>\";\t\n\tfuncState(\"Invoke As Function\");\n\tthisResult += \"| window.name: \" + window.name + \"<br>\";\n\tvar invoStaAsConst = new funcState(\"Invoke with Constructor\");\n\tthisResult += \"| invoStaAsConst.name: \" + invoStaAsConst.name + \"<br>\";\n\tthisResult += \"---------------------------\" + \"<br>\";\t\n\t\n\tthisResult += \"---------------------------\" + \"<br>\";\t\t\n\tobj.method1(\"Invoke As Method\"); \n\tthisResult += \"| obj.name: \" + obj.name + \"<br>\";\n\tvar objAsConst = new obj.method1(\"Invoke with Constructor\");\n\tthisResult += \"| objAsConst.name: \" + objAsConst.name + \"<br>\";\n\tthisResult += \"---------------------------\" + \"<br>\";\t\n\t\n\tthisResult += \"---------------------------\" + \"<br>\";\t\n\tfuncExp.call(obj, \"Invoke With Function Method\");\n\tthisResult += \"| obj.name: \" + obj.name + \"<br>\";\n\tthisResult += \"---------------------------\" + \"<br>\";\n\t\n\t\n\t//Object Example\n\t\n\t// Function Constructor\n\tfunction PersonObjConstr()\t{\n\t\tthis.firstname = \"John\";\n\t\tthis.lastname = \"Doe\";\n\t\tthis.greetFullName = function()\t{\n\t\t\treturn \"PersonObjConstr says: Hello \" + this.firstname + \n\t\t\t\" \" + this.lastname;\n\t\t};\n\t}\n\t\n\t// Object Literal\n\tvar personObjLit = {\n\t\tfirstname : \"John\",\n\t\tlastname: \"Doe\",\n\t\tgreetFullName : function() {\n\t\t\treturn \"personObjLit says: Hello \" + this.firstname + \n\t\t\t\" \" + this.lastname;\t\n\t\t}\n\t};\n\t \n\t\n\tvar james = new PersonObjConstr();\n\tjames.firstname = \"James\";\n\tjames.lastname = \"Pabon\";\n\tPersonObjConstr.prototype.formalGreet = function() {\n\t\treturn \"Good day \" + this.lastname + \", \" + this.firstname;\n\t};\n\n\t\n\tvar valerie = Object.create(personObjLit);\n\tvalerie.firstname = \"Valerie\";\n\tpersonObjLit.formalGreet = function() {\n\t\treturn \"Good day \" + this.lastname + \", \" + this.firstname;\n\t};\n\n    \n    var protoResult = \"---------------------------\" + \"</br>\";\n\tprotoResult += \"| Create James with PersonObjConstr() & call james.greetFullName()\" + \"</br>\";\n\tvar james = new PersonObjConstr();\n\tprotoResult += \"| \" + james.greetFullName() + \"</br>\";\n\tjames.firstname = \"James\";\n\tjames.lastname = \"Pabon\";\n\tprotoResult += \"| Change james.firstname: \" + james.firstname + \"</br>\";\n\tprotoResult += \"| Change james.lastname: \" + james.lastname + \"</br>\";\n\tprotoResult += \"| Call james.greetFullName() again.\" + \"</br>\";\n\tprotoResult += \"| \" + james.greetFullName() + \"</br>\";\n\tprotoResult += \"---------------------------\" + \"</br>\";\n\t\n\tprotoResult += \"---------------------------\" + \"</br>\";\n\tprotoResult += \"| Add .formalGreet() to PersonObjConstr.prototype\" + \"</br>\";\n\tPersonObjConstr.prototype.formalGreet = function() {\n\t\treturn \"Good day \" + this.lastname + \", \" + this.firstname;\n\t};\n\tprotoResult += \"| Call james.formalGreet()\" + \"</br>\";\n\tprotoResult += \"| \" + james.formalGreet() + \"</br>\";\n\tprotoResult += \"---------------------------\" + \"</br>\";\n\t\n\tprotoResult += \"---------------------------\" + \"</br>\";\n\tprotoResult += \"| Call personObjLit.greetFullName()\" + \"</br>\";\n\tprotoResult += \"| \" + personObjLit.greetFullName() + \"</br>\";\n\tprotoResult += \"| Create Valerie object with Object.create(personObjLit)\" + \"</br>\";\n\tvar valerie = Object.create(personObjLit);\n\tvalerie.firstname = \"Valerie\";\n\tprotoResult += \"| Change valerie.firstname: \" + valerie.firstname + \"</br>\";\n\tprotoResult += \"| Call valerie.greetFullName() again.\" + \"</br>\";\n\tprotoResult += \"| \" + valerie.greetFullName() + \"</br>\";\n\tprotoResult += \"---------------------------\" + \"</br>\";\n\t\n\tprotoResult += \"---------------------------\" + \"</br>\";\n\tprotoResult += \"| Add .formalGreet() to personObjLit\" + \"</br>\";\n\tpersonObjLit.formalGreet = function() {\n\t\treturn \"Good day \" + this.lastname + \", \" + this.firstname;\n\t};\n\tprotoResult += \"| Call valerie.formalGreet()\" + \"</br>\";\n\tprotoResult += \"| \" + valerie.formalGreet() + \"</br>\";\n\tprotoResult += \"---------------------------\" + \"</br>\";\n    \n    \n    //Concept content\n    \n    jc.concept = [\n    \t\n    {\n\t\"name\" : \"IIFE\",\n\t\"def\" :\t\"A <dfn><abbr title='Immediately Invoked Function Element'>IIFE</abbr></dfn> \"+\n\t\t\t\"is a JavaScript function that runs as soon as it is defined.\",\n\t\"cite\" : \"MDN - https://developer.mozilla.org/en-US/docs/Glossary/IIFE\",\n\t\"defDesc\" :\t\"IIFE's are commonly used by JS libraries and frameworks to place \"+\n\t\t        \"their code within a local scope thus avoiding naming collisions with other \"+\n\t\t        \"libraries and application JavaScript code. \"+ \n\t\t        \"The code below shows how the IIFE creates a new execution context \"+ \n\t\t        \"where a new variable named <code>localGlobal</code> is mutated and \"+\n\t\t        \"the local reference of the window object is utilized to modify the DOM. \"+\n\t\t        \"Note that the two variables named <code>localGlobal</code> point \"+\n\t\t        \"to separate locations in memory for their values because of the \"+\n\t\t        \"different  executions contexts in which they were created.\",\n\t\"code\" :\t\"\\n\"+\n\t\t\t\t\"\\t // IIFE\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t var localGlobal = 0;\\n\"+\n\t\t\t\t\"\\t var globalVariable = 5;\\n\"+\n\t\t\t\t\"\\t var myIIFE = (function(localGlobal, localWindow) {\\n\"+\n\t\t\t\t\"\\t\\t localGlobal = 100;\\n\"+\n\t\t\t\t\"\\t\\t localWindow.document.getElementById((\\\"testDiv\\\")).innerHTML=\\\"YES\\\";\\n\"+ \n\t\t\t\t\"\\t\\t return localGlobal;\\n\"+\n\t\t\t\t\"\\t })(globalVariable, window);\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t console.log(\\\"globalVariable = \\\" + globalVariable);\\n\"+\n\t\t\t\t\"\\t console.log(\\\"localGlobal = \\\" + localGlobal);\\n\"+\n\t\t\t\t\"\\t console.log(\\\"myIIFE = \\\" + myIIFE);\\n\",\n\t\"resultsLabel\" : \"<b>console.log output</b><br>\",\n\t\"controls\" :{\t\"objPrpName\" : \"iife\",\n\t\t\t\t\t\"type\": \"test-div\",\n\t\t\t\t\t\"templateHead\" : \"Contents of testDiv\" \n\t\t\t\t},\n\t\"result\" : iifeResult,\n\t\"xboxDesc\" : \t\"The above shows the <code>globalVariable</code> maintaining  \"+\n            \t\t\"its value, two different values of the two <code>localGlobal</code> \"+\n            \t\t\"variables, the value of <code>myIIFE</code> which is assigned \"+\n            \t\t\"the return value of the anonymous function and the window object referenced \"+\n            \t\t\"within the IIFE local scope setting the HTML of <code>#testDiv</code>\"\n\t},\t\n\t{\n\t\"name\" : \"Namespacing\",\n\t\"def\" :\t\"A <dfn>Namespace</dfn> is a separate execution context which \"+\n\t\t\t\"encapsulates a block of code to avoid collisions with other \"+\n\t\t\t\"objects or variables.\",\n\t\"cite\" : \"Me\",\n\t\"defDesc\" :\t\"The code below shows a new execution context created by an  \"+ \n\t\t\t\t\"IFFE. An empty objected named <code>var newSpace</code> is defined, \"+\n\t\t\t\t\"and set as an argument for the function. The \"+\n\t\t\t\t\"<code>o.prop1 = \\\"NewSpace Value\\\"</code> property \"+\n\t\t\t\t\"and the <code>o.func1 = function() {...}</code> method are defined  \"+\n\t\t\t\t\"on the empty object and can then be accessed via \"+\n\t\t\t\t\"<code>newSpace.prop1</code> &  \"+ \n\t\t\t\t\"<code>newSpace.func1</code> so as not to collide with the global \"+\n\t\t\t\t\"<code>var prop1</code> & <code>var func1</code>.\",\n\t\"code\" :\t\"\\n\"+\t\t\t\t\t\n\t\t\t\t\"\\t // Namespacing\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t var newSpace = newSpace || {};\\n\"+\n\t\t\t\t\"\\t (function(o) {\\n\"+\n\t\t\t\t\"\\t\\t console.log(o);\\n\"+\n\t\t\t\t\"\\t\\t o.prop1 = \\\"NewSpace Value\\\";\\n\"+\n\t\t\t\t\"\\t\\t o.func1 = function() {\\n\"+\n\t\t\t\t\"\\t\\t\\t console.log(\\\"----------------------\\\");\\n\"+\n\t\t\t\t\"\\t\\t\\t console.log(\\\"| This is NewSpace func1\\\");\\n\"+\n\t\t\t\t\"\\t\\t\\t console.log(\\\"| NewSpace prop1: \\\"+o.prop1);\\n\"+\n\t\t\t\t\"\\t\\t\\t console.log(\\\"| Global prop1: \\\"+prop1);\\n\"+\n\t\t\t\t\"\\t\\t\\t console.log(\\\"----------------------\\\");\\n\"+\n\t\t\t\t\"\\t\\t }\\n\"+\n\t\t\t\t\"\\t })(newSpace)\\n\"+\n\t\t\t\t\"\\n\"+\t\t\t\t\t\n\t\t\t\t\"\\t var\tprop1 = \\\"Global Value\\\";\\n\"+\n\t\t\t\t\"\\t var func1 = function() {\\n\"+\n\t\t\t\t\"\\t\\t console.log(\\\"----------------------\\\");\\n\"+\n\t\t\t\t\"\\t\\t console.log(\\\"| This is Global func1\\\");\\n\"+\n\t\t\t\t\"\\t\\t console.log(\\\"| Global prop1: \\\"+prop1);\\n\"+\n\t\t\t\t\"\\t\\t console.log(\\\"| NewSpace prop1: \\\"+newSpace.prop1);\\n\"+\n\t\t\t\t\"\\t\\t console.log(\\\"----------------------\\\");\\n\"+\n\t\t\t\t\"\\t }()\\n\"+\t\t\t\n\t\t\t\t\"\\t newSpace.func1();\\n\",\n\t\"resultsLabel\" : \"<b>console.log output</b><br>\",\n\t\"controls\" :\t{\t\"objPrpName\" : \"namespace\"\n\t\t\t\t\t},\n\t\"result\" : namespaceResult,\n\t\"xboxDesc\" : \t\"The above output shows how creating a name space prevents \"+\n            \t\t\"variables of the same name from colliding.\"\n\t},\n\t{\n\t\"name\" : \"Closures\",\n\t\"def\" :\t\"A <dfn>closure</dfn> is a special kind of object that combines \"+\n\t\t\t\"two things: a function, and the environment in which that function \"+\n\t\t\t\"was created.\",\n\t\"cite\" : \"MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\",\n\t\"defDesc\" : \"The code below shows a closure around the <code>add: function(){...}</code> \"+ \n\t\t        \"and <code>subtract: function(){...}</code>. A closure is a special \"+\n\t\t        \"property of JavaScript which preserves the scope chain for functions \"+\n\t\t        \"which have utilized free variables that were created in execution contexts \"+\n\t\t        \"which are no longer in memory. This allows the \"+\n\t\t        \"<code>add: function(){return counter += 1;}</code> and <code>subtract: \"+ \n\t\t        \"function(){return counter -= 1;}</code> to retain access to the \"+\n\t\t        \"counter variable even after the anonymous execution context which created \"+ \n\t\t        \"it has ended. In the example <code>var arithmetic</code> is assigned an \"+\n\t\t        \"<abbr title='Immediately Invoked Function Element'>IFFE</abbr>, \"+\n\t\t        \"however creating a closure does not need to utilize immediately invoked \"+\n\t\t        \"functions.\",\n\t\"code\" :\"\\n\"+\n\t\t\t\"\\t // Closures\\n\"+\n\t\t\t\"\\n\"+\n\t\t\t\"\\t var arithmetic = (function () {\\n\"+\n\t\t\t\"\\t\\t var counter = 0;\\n\"+\n\t\t\t\"\\t\\t return {\\n\"+\n\t\t\t\"\\t\\t\\t add: function(){return counter += 1;},\\n\"+\n\t\t\t\"\\t\\t\\t subtract: function(){return counter -= 1;}\\n\"+\n\t\t\t\"\\t\\t }\\n\"+\n\t\t\t\"\\t })();\",\n\t\"resultsLabel\" : \"<b>count</b> = \",\n\t\"controls\" : {\t\"type\": \"button-two\", \n\t\t\t\t\t\"objPrpName\" : \"closure\", \n\t\t\t\t\t\"buttonProps\" : {\t\n\t\t\t\t\t\t\"b1text\": \"Add\", \n\t\t\t\t\t\t\"b1Func\" : \"add\", \n\t\t\t\t\t\t\"b2text\" : \"subtract\", \n\t\t\t\t\t\t\"b2Func\" : \"subtract\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t},\n\t\"result\" : \"0\",\n\t\"action\" :\tfunction(operation)\t{\n\t\t\t\t\tthis.result = arithmetic[operation]();\t\n\t},\n\t\"xboxDesc\" : \t\"Click the buttons above to modify the \"+\n            \t\t\"value of the <code>counter</code> variable made possible by \"+\n            \t\t\"the closure reference \"+\n            \t\t\"around <code>add()</code> & <code>subtract()</code> functions.\"\n\t},\n\t{\n\t\"name\" : \"this\",\n\t\"def\" :\t\"<dfn><code>this</code></dfn> is a JavaScript keyword with a value that \"+\n\t\t\t\"is determined by its lexical context and method of invocation.\",\n\t\"cite\" : \"Me\",\n\t\"defDesc\" : \"The code below shows three different  function definitions, function \"+ \n\t\t        \"expression, function statement & function as a method of an object. \"+\n\t\t        \"There are 4 different ways to invoke a function, as a function, with \"+\n\t\t        \"a constructor, as an object method and with a function method. \"+\n\t\t        \"When invoked as a function, <code>this</code> references the Global \"+\n\t\t        \"object. When invoked with a constructor <code>this</code> references  \"+\n\t\t        \"the empty object created by use of the <code>new</code> keyword  \"+\n\t\t        \"which is returned to the variable in constructor assignment. When \"+ \n\t\t        \"invoked as a method of an object <code>this</code> references the \"+\n\t\t        \"object the invoked method is sitting on. Note however that if a method \"+\n\t\t        \"is invoked with a constructor the <code>this</code> variable still references \"+\n\t\t        \"the empty object created by use of the <code>new</code> keyword which \"+\n\t\t        \"is why <code>objAsConst.name</code> \"+\n\t\t        \"is undefined in the output below. Finally when invoked with a function \"+\n\t\t        \"method this takes the value of the context passed to it which is why \"+\n\t\t        \"<code>obj.name</code> is equal to <code>funcExp</code> in the final \"+\n\t\t        \"example below.\",\n\t\"code\" :\t\"\\n\"+\t\t\t\t\t\n\t\t\t\t\"\\t // this Example\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t var funcExp = function(invoType) {\\n\"+\n\t\t\t\t\"\\t\\t this.name = \\\"funcExp\\\";\\n\"+\n\t\t\t\t\"\\t\\t console.log(\\\"| \\\" + this.name + \\\" \\\" + invoType);\\n\"+\n\t\t\t\t\"\\t\\t console.log(\\\"| this = \\\" + this);\\n\"+\n\t\t\t\t\"\\t }\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t function funcState(invoType) {\\n\"+\n\t\t\t\t\"\\t\\t this.name = \\\"funcState\\\";\\n\"+\n\t\t\t\t\"\\t\\t console.log(\\\"| \\\" + this.name + \\\" \\\" + invoType);\\n\"+\n\t\t\t\t\"\\t\\t console.log(\\\"| this = \\\" + this);\\n\"+\n\t\t\t\t\"\\t }\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t var obj = {\\n\"+\n\t\t\t\t\"\\t\\t name : \\\"obj\\\",\\n\"+\n\t\t\t\t\"\\t\\t method1 : function(invoType) {\\n\"+\n\t\t\t\t\"\\t\\t\\t console.log(\\\"| \\\" + this.name + \\\" \\\" + invoType);\\n\"+\n\t\t\t\t\"\\t\\t\\t console.log(\\\"| this = \\\" + this);\\n\"+\n\t\t\t\t\"\\t\\t }\\n\"+\n\t\t\t\t\"\\t }\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\t funcExp(\\\"Invoke As Function\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| window.name: \\\" + window.name);\\n\"+\n\t\t\t\t\"\\t var invoExpAsConst = new funcExp(\\\"Invoke with Constructor\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| invoExpAsConst.name: \\\" + invoExpAsConst.name);\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\t funcState(\\\"Invoke As Function\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| window.name: \\\" + window.name);\\n\"+\n\t\t\t\t\"\\t var invoStaAsConst = new funcState(\\\"Invoke with Constructor\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| invoStaAsConst.name: \\\" + invoStaAsConst.name);\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\t\t\n\t\t\t\t\"\\t obj.method1(\\\"Invoke As Method\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| obj.name: \\\" + obj.name);\\n\"+\n\t\t\t\t\"\\t var objAsConst = new obj.method1(\\\"Invoke with Constructor\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| objAsConst.name: \\\" + objAsConst.name);\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\t funcExp.call(obj, \\\"Invoke With Function Method\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| obj.name: \\\" + obj.name);\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\",\n\t\"resultsLabel\" : \"<b>console.log output</b><br>\",\n\t\"controls\" :\t{\t\"objPrpName\" : \"this\"\n\t\t\t\t\t},\n\t\"result\" : thisResult,\n\t\"xboxDesc\" : \t\"The above output shows the value of <code>this</code> as well \"+\n            \t\t\"as the <code>name</code> variable under different  lexical & invocation conditions.\"\n\t},\n\t{\n\t\"name\" : \"Object Creation and Prototypal Inheritance\",\n\t\"def\" :\t\"<dfn>Prototypal Inheritance</dfn> is the ability of any \"+\n\t\t\t\"JavaScript object to access properties and methods of its \"+\n\t\t\t\"prototype (the object from which it was created).\",\n\t\"cite\" : \"Me\",\n\t\"defDesc\" : \"The code below shows three methods of creating an object, Object Literal \"+\n\t\t\t\t\"syntax, a Function Constructor and <code>Object.create()</code>. \"+\n\t\t\t\t\"Object literal syntax simply creates and object on the fly and as such its \"+\n\t\t\t\t\"<code>__prototype__</code> is the <code>Object</code> object and it will \"+\n\t\t\t\t\"have access to all the properties and methods of <code>Object</code>. \"+\n\t\t\t\t\"<p></p>\"+\n\t\t\t\t\"The function constructor has a special property named <code>.prototype</code>. \"+\n\t\t\t\t\"This property will become the <code>__prototype__</code> of any objects \"+\n\t\t\t\t\"created by the function constructor. All properties and methods added to \"+\n\t\t\t\t\"the <code>.prototype</code> property of a function constructor will be \"+\n\t\t\t\t\"available to all objects it creates. \"+\n\t\t\t\t\"<p></p>\"+\n\t\t\t\t\"Creating objects with <code>Object.create()</code> utilizes an object \"+\n\t\t\t\t\"literal as a <code>__prototype__</code> for the objects created by this method. \"+\n\t\t\t\t\"All properties and methods added to the object literal will be \"+\n\t\t\t\t\"available to all objects created from it.\",\n\t\"code\" :\t\"\\n\"+\t\t\t\t\t\n\t\t\t\t\"\\t //Object Example\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t // Function Constructor\\n\"+\n\t\t\t\t\"\\t function PersonObjConstr()\t{\\n\"+\n\t\t\t\t\"\\t\\t this.firstname = \\\"John\\\";\\n\"+\n\t\t\t\t\"\\t\\t this.lastname = \\\"Doe\\\";\\n\"+\n\t\t\t\t\"\\t\\t this.greetFullName = function()\t{\\n\"+\n\t\t\t\t\"\\t\\t\\t return \\\"PersonObjConstr says: Hello \\\" + this.firstname +\\n\"+ \n\t\t\t\t\"\\t\\t\\t\t\\\", \\\" + this.lastname;\\n\"+\n\t\t\t\t\"\\t\\t };\\n\"+\n\t\t\t\t\"\\t }\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t // Object Literal\\n\"+\n\t\t\t\t\"\\t var personObjLit = {\\n\"+\n\t\t\t\t\"\\t\\t firstname : \\\"John\\\",\\n\"+\n\t\t\t\t\"\\t\\t lastname: \\\"Doe\\\",\\n\"+\n\t\t\t\t\"\\t\\t greetFullName : function() {\\n\"+\n\t\t\t\t\"\\t\\t\\t\treturn \\\"personObjLit says: Hello \\\" + this.firstname +\\n\"+ \n\t\t\t\t\"\\t\\t\\t\t\\\", \\\" + this.lastname;\\n\"+\t\n\t\t\t\t\"\\t\\t }\\n\"+\n\t\t\t\t\"\\t };\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| Create James with PersonObjConstr() & call james.greetFullName()\\\");\\n\"+\n\t\t\t\t\"\\t var james = new PersonObjConstr();\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| \\\" + james.greetFullName());\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t james.firstname = \\\"James\\\";\\n\"+\n\t\t\t\t\"\\t james.lastname = \\\"Pabon\\\";\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| Change james.firstname: \\\" + james.firstname);\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| Change james.lastname: \\\" + james.lastname);\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| Call james.greetFullName() again.\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| \\\" + james.greetFullName());\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| Add .formalGreet() to PersonObjConstr.prototype\\\");\\n\"+\n\t\t\t\t\"\\t PersonObjConstr.prototype.formalGreet = function() {\\n\"+\n\t\t\t\t\"\\t\\t return \\\"Good day \\\" + this.lastname + \\\", \\\" + this.firstname;\\n\"+\n\t\t\t\t\"\\t };\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| Call james.formalGreet()\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| \\\" + james.formalGreet());\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| Call personObjLit.greetFullName()\\\");\\n\"+\n\t\t\t\t\"\\t console.log(personObjLit.greetFullName());\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| Create Valerie object with Object.create(personObjLit)\\\");\\n\"+\n\t\t\t\t\"\\t var valerie = Object.create(personObjLit);\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t valerie.firstname = \\\"Valerie\\\";\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| Change valerie.firstname: \\\" + valerie.firstname);\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| Call valerie.greetFullName() again.\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| \\\" + valerie.greetFullName());\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t console.log(\\\"---------------------------\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| Add .formalGreet() to personObjLit\\\");\\n\"+\n\t\t\t\t\"\\t personObjLit.formalGreet = function() {\\n\"+\n\t\t\t\t\"\\t\\t return \\\"Good day \\\" + this.lastname + \\\", \\\" + this.firstname;\\n\"+\n\t\t\t\t\"\\t };\\n\"+\n\t\t\t\t\"\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| Call valerie.formalGreet()\\\");\\n\"+\n\t\t\t\t\"\\t console.log(\\\"| \\\" + valerie.formalGreet());\\n\"+\n\t\t\t    \"\\t console.log(\\\"---------------------------\\\");\\n\",\n\t\"resultsLabel\" : \"<b>console.log output</b><br>\",\n\t\"controls\" :\t{\t\"objPrpName\" : \"proto\"\n\t\t\t\t\t},\n\t\"result\" : protoResult,\n\t\"xboxDesc\" :\t\"<p>\"+\n\t\t\t\"The above output first shows the creation of the <code>james</code> object by \"+\n        \t\t\"a function constructor and the addition of <code>.formalGreet()</code> to the \"+\n        \t\t\"<code>.prototype</code> property of <code>PersonObjConstr</code> making it \"+\n        \t\t\"available to the james object through prototypal inheritance. \"+\n        \t\t\"</p>\"+\n        \t\t\"<p>\"+\n        \t\t\"Next it \"+\n        \t\t\"shows the creation of the <code>valerie</code> object by using Object.create() \"+\n        \t\t\"and making the <code>personObjLit</code> object literal, the <code>__proto__</code> \"+\n        \t\t\"of the <code>valerie</code> object. Similarly <code>.formalGreet()</code> is added \"+\n        \t\t\"to <code>personObjLit</code> \"+\n        \t\t\"making it available to the <code>valerie</code> object through prototypal inheritance.\"+\n        \t\t\"</p>\"\n\t}\n\t];\n        \n    console.log(\"-----jc Controller Scope-----\");\n\tconsole.log(jc);    \n        \n});    \n})"],"sourceRoot":"/source/"}